// =============================================================================
// Color Palette Framework - CSS Variables First Approach
// =============================================================================

// -----------------------------------------------------------------------------
// CSS Custom Properties (Primary Source of Truth)
// -----------------------------------------------------------------------------

:root {
  // Primary palette
  --color-primary-50: #f0f9ff;
  --color-primary-100: #e0f2fe;
  --color-primary-200: #bae6fd;
  --color-primary-300: #7dd3fc;
  --color-primary-400: #38bdf8;
  --color-primary-500: #0ea5e9;
  --color-primary-600: #0284c7;
  --color-primary-700: #0369a1;
  --color-primary-800: #075985;
  --color-primary-900: #0c4a6e;
  --color-primary-950: #082f49;

  // Secondary palette
  --color-secondary-50: #fdf4ff;
  --color-secondary-100: #fae8ff;
  --color-secondary-200: #f5d0fe;
  --color-secondary-300: #f0abfc;
  --color-secondary-400: #e879f9;
  --color-secondary-500: #d946ef;
  --color-secondary-600: #c026d3;
  --color-secondary-700: #a21caf;
  --color-secondary-800: #86198f;
  --color-secondary-900: #701a75;
  --color-secondary-950: #4a044e;

  // Accent palette
  --color-accent-50: #fff7ed;
  --color-accent-100: #ffedd5;
  --color-accent-200: #fed7aa;
  --color-accent-300: #fdba74;
  --color-accent-400: #fb923c;
  --color-accent-500: #f97316;
  --color-accent-600: #ea580c;
  --color-accent-700: #c2410c;
  --color-accent-800: #9a3412;
  --color-accent-900: #7c2d12;
  --color-accent-950: #431407;

  // Neutral palette
  --color-neutral-50: #fafafa;
  --color-neutral-100: #f5f5f5;
  --color-neutral-200: #e5e5e5;
  --color-neutral-300: #d4d4d4;
  --color-neutral-400: #a3a3a3;
  --color-neutral-500: #737373;
  --color-neutral-600: #525252;
  --color-neutral-700: #404040;
  --color-neutral-800: #262626;
  --color-neutral-900: #171717;
  --color-neutral-950: #0a0a0a;

  // Semantic colors
  --color-success-50: #f0fdf4;
  --color-success-100: #dcfce7;
  --color-success-200: #bbf7d0;
  --color-success-300: #86efac;
  --color-success-400: #4ade80;
  --color-success-500: #22c55e;
  --color-success-600: #16a34a;
  --color-success-700: #15803d;
  --color-success-800: #166534;
  --color-success-900: #14532d;
  --color-success-950: #052e16;

  --color-warning-50: #fffbeb;
  --color-warning-100: #fef3c7;
  --color-warning-200: #fde68a;
  --color-warning-300: #fcd34d;
  --color-warning-400: #fbbf24;
  --color-warning-500: #f59e0b;
  --color-warning-600: #d97706;
  --color-warning-700: #b45309;
  --color-warning-800: #92400e;
  --color-warning-900: #78350f;
  --color-warning-950: #451a03;

  --color-error-50: #fef2f2;
  --color-error-100: #fee2e2;
  --color-error-200: #fecaca;
  --color-error-300: #fca5a5;
  --color-error-400: #f87171;
  --color-error-500: #ef4444;
  --color-error-600: #dc2626;
  --color-error-700: #b91c1c;
  --color-error-800: #991b1b;
  --color-error-900: #7f1d1d;
  --color-error-950: #450a0a;

  --color-info-50: #eff6ff;
  --color-info-100: #dbeafe;
  --color-info-200: #bfdbfe;
  --color-info-300: #93c5fd;
  --color-info-400: #60a5fa;
  --color-info-500: #3b82f6;
  --color-info-600: #2563eb;
  --color-info-700: #1d4ed8;
  --color-info-800: #1e40af;
  --color-info-900: #1e3a8a;
  --color-info-950: #172554;

  // Semantic aliases
  --color-primary: var(--color-primary-500);
  --color-secondary: var(--color-secondary-500);
  --color-accent: var(--color-accent-500);
  --color-success: var(--color-success-500);
  --color-warning: var(--color-warning-500);
  --color-error: var(--color-error-500);
  --color-info: var(--color-info-500);

  // Text colors
  --text-primary: var(--color-neutral-900);
  --text-secondary: var(--color-neutral-600);
  --text-muted: var(--color-neutral-400);
  --text-inverse: var(--color-neutral-50);

  // Background colors
  --bg-primary: var(--color-neutral-50);
  --bg-secondary: var(--color-neutral-100);
  --bg-tertiary: var(--color-neutral-200);
  --bg-inverse: var(--color-neutral-900);

  // Border colors
  --border-primary: var(--color-neutral-200);
  --border-secondary: var(--color-neutral-300);
  --border-focus: var(--color-primary-500);
}

// -----------------------------------------------------------------------------
// SCSS Variables - Mirror CSS Variables for Compilation
// -----------------------------------------------------------------------------

// NOTE: These are mirrors of the CSS variables for use in SCSS functions
// and compilation-time operations. Keep in sync with :root values above.

// Primary palette
$primary-50: #f0f9ff;
$primary-100: #e0f2fe;
$primary-200: #bae6fd;
$primary-300: #7dd3fc;
$primary-400: #38bdf8;
$primary-500: #0ea5e9;
$primary-600: #0284c7;
$primary-700: #0369a1;
$primary-800: #075985;
$primary-900: #0c4a6e;
$primary-950: #082f49;

// Secondary palette
$secondary-50: #fdf4ff;
$secondary-100: #fae8ff;
$secondary-200: #f5d0fe;
$secondary-300: #f0abfc;
$secondary-400: #e879f9;
$secondary-500: #d946ef;
$secondary-600: #c026d3;
$secondary-700: #a21caf;
$secondary-800: #86198f;
$secondary-900: #701a75;
$secondary-950: #4a044e;

// Accent palette
$accent-50: #fff7ed;
$accent-100: #ffedd5;
$accent-200: #fed7aa;
$accent-300: #fdba74;
$accent-400: #fb923c;
$accent-500: #f97316;
$accent-600: #ea580c;
$accent-700: #c2410c;
$accent-800: #9a3412;
$accent-900: #7c2d12;
$accent-950: #431407;

// Neutral palette
$neutral-50: #fafafa;
$neutral-100: #f5f5f5;
$neutral-200: #e5e5e5;
$neutral-300: #d4d4d4;
$neutral-400: #a3a3a3;
$neutral-500: #737373;
$neutral-600: #525252;
$neutral-700: #404040;
$neutral-800: #262626;
$neutral-900: #171717;
$neutral-950: #0a0a0a;

// Semantic colors
$success-50: #f0fdf4;
$success-100: #dcfce7;
$success-200: #bbf7d0;
$success-300: #86efac;
$success-400: #4ade80;
$success-500: #22c55e;
$success-600: #16a34a;
$success-700: #15803d;
$success-800: #166534;
$success-900: #14532d;
$success-950: #052e16;

$warning-50: #fffbeb;
$warning-100: #fef3c7;
$warning-200: #fde68a;
$warning-300: #fcd34d;
$warning-400: #fbbf24;
$warning-500: #f59e0b;
$warning-600: #d97706;
$warning-700: #b45309;
$warning-800: #92400e;
$warning-900: #78350f;
$warning-950: #451a03;

$error-50: #fef2f2;
$error-100: #fee2e2;
$error-200: #fecaca;
$error-300: #fca5a5;
$error-400: #f87171;
$error-500: #ef4444;
$error-600: #dc2626;
$error-700: #b91c1c;
$error-800: #991b1b;
$error-900: #7f1d1d;
$error-950: #450a0a;

$info-50: #eff6ff;
$info-100: #dbeafe;
$info-200: #bfdbfe;
$info-300: #93c5fd;
$info-400: #60a5fa;
$info-500: #3b82f6;
$info-600: #2563eb;
$info-700: #1d4ed8;
$info-800: #1e40af;
$info-900: #1e3a8a;
$info-950: #172554;

// Semantic aliases
$color-primary: $primary-500;
$color-secondary: $secondary-500;
$color-accent: $accent-500;
$color-success: $success-500;
$color-warning: $warning-500;
$color-error: $error-500;
$color-info: $info-500;

// Text colors
$text-primary: $neutral-900;
$text-secondary: $neutral-600;
$text-muted: $neutral-400;
$text-inverse: $neutral-50;

// Background colors
$bg-primary: $neutral-50;
$bg-secondary: $neutral-100;
$bg-tertiary: $neutral-200;
$bg-inverse: $neutral-900;

// Border colors
$border-primary: $neutral-200;
$border-secondary: $neutral-300;
$border-focus: $primary-500;

// -----------------------------------------------------------------------------
// Color Maps for Programmatic Access
// -----------------------------------------------------------------------------

$color-palette: (
  primary: (
    50: $primary-50,
    100: $primary-100,
    200: $primary-200,
    300: $primary-300,
    400: $primary-400,
    500: $primary-500,
    600: $primary-600,
    700: $primary-700,
    800: $primary-800,
    900: $primary-900,
    950: $primary-950
  ),
  secondary: (
    50: $secondary-50,
    100: $secondary-100,
    200: $secondary-200,
    300: $secondary-300,
    400: $secondary-400,
    500: $secondary-500,
    600: $secondary-600,
    700: $secondary-700,
    800: $secondary-800,
    900: $secondary-900,
    950: $secondary-950
  ),
  accent: (
    50: $accent-50,
    100: $accent-100,
    200: $accent-200,
    300: $accent-300,
    400: $accent-400,
    500: $accent-500,
    600: $accent-600,
    700: $accent-700,
    800: $accent-800,
    900: $accent-900,
    950: $accent-950
  ),
  neutral: (
    50: $neutral-50,
    100: $neutral-100,
    200: $neutral-200,
    300: $neutral-300,
    400: $neutral-400,
    500: $neutral-500,
    600: $neutral-600,
    700: $neutral-700,
    800: $neutral-800,
    900: $neutral-900,
    950: $neutral-950
  ),
  success: (
    50: $success-50,
    100: $success-100,
    200: $success-200,
    300: $success-300,
    400: $success-400,
    500: $success-500,
    600: $success-600,
    700: $success-700,
    800: $success-800,
    900: $success-900,
    950: $success-950
  ),
  warning: (
    50: $warning-50,
    100: $warning-100,
    200: $warning-200,
    300: $warning-300,
    400: $warning-400,
    500: $warning-500,
    600: $warning-600,
    700: $warning-700,
    800: $warning-800,
    900: $warning-900,
    950: $warning-950
  ),
  error: (
    50: $error-50,
    100: $error-100,
    200: $error-200,
    300: $error-300,
    400: $error-400,
    500: $error-500,
    600: $error-600,
    700: $error-700,
    800: $error-800,
    900: $error-900,
    950: $error-950
  ),
  info: (
    50: $info-50,
    100: $info-100,
    200: $info-200,
    300: $info-300,
    400: $info-400,
    500: $info-500,
    600: $info-600,
    700: $info-700,
    800: $info-800,
    900: $info-900,
    950: $info-950
  )
) !default;

// -----------------------------------------------------------------------------
// Utility Functions
// -----------------------------------------------------------------------------

// Get color from palette
@function get-color($palette, $shade: 500) {
  @return map-get(map-get($color-palette, $palette), $shade);
}

// Get CSS variable
@function get-css-var($name) {
  @return var(--#{$name});
}

// Generate color variations using SCSS functions
@function lighten-color($color, $amount: 10%) {
  @return lighten($color, $amount);
}

@function darken-color($color, $amount: 10%) {
  @return darken($color, $amount);
}

// Alpha variants
@function alpha-color($color, $alpha: 0.5) {
  @return rgba($color, $alpha);
}

// Mixed approach - use CSS var with SCSS fallback
@function color-with-fallback($css-var, $scss-fallback) {
  @return var(--#{$css-var}, #{$scss-fallback});
}

// -----------------------------------------------------------------------------
// Utility Mixins
// -----------------------------------------------------------------------------

// Generate color utilities with both CSS vars and SCSS fallbacks
@mixin generate-color-utilities($prefix, $palette) {
  @each $shade, $color in $palette {
    .#{$prefix}-#{$shade} {
      color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
    .bg-#{$prefix}-#{$shade} {
      background-color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
    .border-#{$prefix}-#{$shade} {
      border-color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
  }
}

// Generate background color utilities only
@mixin generate-bg-utilities($prefix, $palette) {
  @each $shade, $color in $palette {
    .bg-#{$prefix}-#{$shade} {
      background-color: #{$color};
    }
  }
}

// Generate text color utilities only
@mixin generate-text-utilities($prefix, $palette) {
  @each $shade, $color in $palette {
    .text-#{$prefix}-#{$shade} {
      color: #{$color};
    }
  }
}

// Generate border color utilities only
@mixin generate-border-utilities($prefix, $palette) {
  @each $shade, $color in $palette {
    .border-#{$prefix}-#{$shade} {
      border-color: #{$color};
    }
  }
}

// Generate all utilities for a specific palette
@mixin generate-palette-utilities($prefix, $palette) {
  @include generate-bg-utilities($prefix, $palette);
  @include generate-text-utilities($prefix, $palette);
  @include generate-border-utilities($prefix, $palette);
}

// Generate all color utilities for all palettes
@mixin generate-all-color-utilities {
  @each $name, $palette in $color-palette {
    @include generate-palette-utilities($name, $palette);
  }
}

// Generate utilities with CSS variables (for theming)
@mixin generate-themeable-utilities($prefix, $palette) {
  @each $shade, $color in $palette {
    .bg-#{$prefix}-#{$shade} {
      background-color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
    .text-#{$prefix}-#{$shade} {
      color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
    .border-#{$prefix}-#{$shade} {
      border-color: var(--color-#{$prefix}-#{$shade}, #{$color});
    }
  }
}

// Convenience mixins that use the color palette directly
@mixin generate-bg-utilities-for($palette-name) {
  @include generate-bg-utilities($palette-name, map-get($color-palette, $palette-name));
}

@mixin generate-text-utilities-for($palette-name) {
  @include generate-text-utilities($palette-name, map-get($color-palette, $palette-name));
}

@mixin generate-border-utilities-for($palette-name) {
  @include generate-border-utilities($palette-name, map-get($color-palette, $palette-name));
}

@mixin generate-palette-utilities-for($palette-name) {
  @include generate-palette-utilities($palette-name, map-get($color-palette, $palette-name));
}

@mixin generate-themeable-utilities-for($palette-name) {
  @include generate-themeable-utilities($palette-name, map-get($color-palette, $palette-name));
}

// Mixin for theming with CSS variables
@mixin theme-aware($property, $css-var, $scss-fallback: null) {
  #{$property}: var(--#{$css-var});
  @if $scss-fallback {
    #{$property}: var(--#{$css-var}, #{$scss-fallback});
  }
}

// -----------------------------------------------------------------------------
// Dark Mode Support
// -----------------------------------------------------------------------------

@media (prefers-color-scheme: dark) {
  :root {
    --text-primary: var(--color-neutral-50);
    --text-secondary: var(--color-neutral-300);
    --text-muted: var(--color-neutral-400);
    --text-inverse: var(--color-neutral-900);

    --bg-primary: var(--color-neutral-900);
    --bg-secondary: var(--color-neutral-800);
    --bg-tertiary: var(--color-neutral-700);
    --bg-inverse: var(--color-neutral-50);

    --border-primary: var(--color-neutral-700);
    --border-secondary: var(--color-neutral-600);
  }
}

// Manual dark mode class
.dark {
  --text-primary: var(--color-neutral-50);
  --text-secondary: var(--color-neutral-300);
  --text-muted: var(--color-neutral-400);
  --text-inverse: var(--color-neutral-900);

  --bg-primary: var(--color-neutral-900);
  --bg-secondary: var(--color-neutral-800);
  --bg-tertiary: var(--color-neutral-700);
  --bg-inverse: var(--color-neutral-50);

  --border-primary: var(--color-neutral-700);
  --border-secondary: var(--color-neutral-600);
}

// -----------------------------------------------------------------------------
// Usage Examples & Best Practices
// -----------------------------------------------------------------------------

// /*
// USAGE PATTERNS:

// 1. Prefer CSS variables for runtime theming:
//    .button {
//      background-color: var(--color-primary);
//      color: var(--text-inverse);
//    }

// 2. Use SCSS variables for compile-time operations:
//    .button-hover {
//      background-color: #{lighten($primary-500, 10%)};
//    }

// 3. Use mixed approach for fallback support:
//    .button {
//      @include theme-aware(background-color, color-primary, $primary-500);
//    }

// 4. Use utility functions for complex operations:
//    .alert {
//      background-color: #{alpha-color($warning-500, 0.1)};
//      border-color: #{get-color(warning, 300)};
//    }

// UTILITY CLASS GENERATION:

// If using @use syntax (recommended):
// @use 'path/to/colors';
// @include colors.generate-bg-utilities-for(neutral);
// @include colors.generate-palette-utilities-for(primary);
// @include colors.generate-all-color-utilities;

// If using @import syntax:
// @import 'path/to/colors';
// @include generate-bg-utilities-for(neutral);
// @include generate-palette-utilities-for(primary);
// @include generate-all-color-utilities;

// Original mixins (require manual palette passing):
// @include generate-bg-utilities(neutral, map-get($color-palette, neutral));
// @include generate-palette-utilities(primary, map-get($color-palette, primary));

// Convenience mixins (use internal palette):
// @include generate-bg-utilities-for(neutral);
// @include generate-text-utilities-for(accent);
// @include generate-border-utilities-for(success);
// @include generate-palette-utilities-for(primary);
// @include generate-themeable-utilities-for(secondary);

// MAINTENANCE NOTES:
// - CSS variables are the primary source of truth
// - SCSS variables must be kept in sync manually
// - Consider using a build tool to generate one from the other
// - CSS variables enable runtime theming, SCSS variables enable compile-time operations
// */

// // -----------------------------------------------------------------------------
// // Generate Utility Classes (Uncomment to use)
// // -----------------------------------------------------------------------------

// // Uncomment the lines below to generate utility classes
// // @include generate-all-color-utilities;

// // Or generate specific palettes using convenience mixins:
// // @include generate-bg-utilities-for(neutral);
// // @include generate-palette-utilities-for(primary);
// // @include generate-themeable-utilities-for(accent);

// // Example output when using generate-bg-utilities-for(neutral):
// /*
// .bg-neutral-50 {
//   background-color: #fafafa;
// }

// .bg-neutral-100 {
//   background-color: #f5f5f5;
// }

// .bg-neutral-200 {
//   background-color: #e5e5e5;
// }

// .bg-neutral-300 {
//   background-color: #d4d4d4;
// }

// .bg-neutral-400 {
//   background-color: #a3a3a3;
// }

// .bg-neutral-500 {
//   background-color: #737373;
// }

// .bg-neutral-600 {
//   background-color: #525252;
// }

// .bg-neutral-700 {
//   background-color: #404040;
// }

// .bg-neutral-800 {
//   background-color: #262626;
// }

// .bg-neutral-900 {
//   background-color: #171717;
// }

// .bg-neutral-950 {
//   background-color: #0a0a0a;
// }

// .text-neutral-50 {
//   color: #fafafa;
// }

// .text-neutral-100 {
//   color: #f5f5f5;
// }

// // ... and so on for all shades and border utilities
// */
